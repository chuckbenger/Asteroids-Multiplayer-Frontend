AWSTemplateFormatVersion: "2010-09-09"
Description: "S3 Hosted Frontend for Asteroid Game with CI/CD pipeline"

Parameters:
  GitHubUsername:
    Type: String
    Description: Your GitHub Username
  GitHubRepo:
    Type: String
    Description: Your GitHub Repo
  GitHubOAuthToken:
    Type: String
    Description: Your GitHub OAuth Token for useage with webhooks

Outputs:
  WebsiteURL:
    Value: !GetAtt [PublicWebsiteBucket, WebsiteURL]
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join ['', ['https://', !GetAtt [PublicWebsiteBucket, DomainName]]]
    Description: Name of S3 bucket to hold website content
  GitHubRepo:
    Value: !Ref GitHubRepo

Resources:
  CloudFormationTrustRole:
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:PassRole
                  - iam:DetachRolePolicy
                  - iam:ListRolePolicies
                  - iam:GetRole
                  - iam:DeleteRolePolicy
                  - iam:UpdateRoleDescription
                  - iam:ListRoles
                  - iam:DeleteRole
                  - iam:GetRolePolicy
                  - iam:CreateInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:ListInstanceProfiles
                  - iam:ListInstanceProfilesForRole
                  - iam:RemoveRoleFromInstanceProfile
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:iam::*:role/${AWS::StackName}*"
                  - !Sub "arn:aws:iam::*:instance-profile/${AWS::StackName}*"
              - Action:
                  - ssm:GetParameters
                  - autoscaling:*
                  - ec2:*
                  - codedeploy:*
                  - elasticloadbalancing:*
                Effect: Allow
                Resource: '*'
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - CloudFormationRolePolicy
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CloudFormation
    Type: AWS::IAM::Role

  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Path: /
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodeBuild
    Type: AWS::IAM::Role

  CodeBuildPolicy:
    Description: Setting IAM policy for service role for CodeBuild
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CacheBucket'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'CacheBucket'
                  - /*
          - Action:
              - kms:GenerateDataKey*
              - kms:Encrypt
              - kms:Decrypt
            Effect: Allow
            Resource:
              - !Join
                - ':'
                - - arn:aws:kms
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - !Join
                    - /
                    - - alias
                      - aws/s3
      PolicyName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodeBuildPolicy
      Roles:
        - !Ref 'CodeBuildRole'
    Type: AWS::IAM::Policy


  CodePipelineTrustRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Sid: 1
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'ArtifactsBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'ArtifactsBucket'
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'PublicWebsiteBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'PublicWebsiteBucket'
                      - /*
              - Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:StopBuild
                Effect: Allow
                Resource:
                  - !GetAtt 'CodeBuildProject.Arn'
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Effect: Allow
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - deploymentgroup
                      - !Join
                        - ''
                        - - !Ref 'AWS::StackName'
                          - '*'
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - application
                      - !Join
                        - ''
                        - - !Ref 'AWS::StackName'
                          - '*'
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - codedeploy
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - deploymentconfig
                      - '*'
          PolicyName: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - CodePipelineRolePolicy
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodePipeline
    Type: AWS::IAM::Role


  CodeBuildProject:
    DependsOn:
      - CodeBuildPolicy
    Properties:
      Artifacts:
        Location: !Ref 'ArtifactsBucket'
        Name: 'build-output.zip'
        NamespaceType: BUILD_ID
        Packaging: ZIP
        Path: 'codebuild'
        Type: S3
      Cache:
        Location: !Ref 'CacheBucket'
        Type: S3
      Description: !Join
        - ''
        - - 'CodeBuild Project for '
          - !Ref 'AWS::StackName'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
      Name: !Ref 'AWS::StackName'
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        Type: GITHUB
        Location: !Join
          - ''
          - - https://github.com/tkblackbelt/
            - !Ref GitHubUsername
            - /
            - !Ref GitHubRepo
            - .git
        BuildSpec: 'buildspecs/build.yml'
    Type: AWS::CodeBuild::Project


  ReleasePipeline:
    DependsOn:
      - CodePipelineTrustRole
      - ArtifactsBucket
      - CodeBuildProject
      - CloudFormationTrustRole
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactsBucket'
        Type: S3
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt
        - CodePipelineTrustRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubUsername
                Repo: !Ref GitHubRepo
                Branch: master
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              InputArtifacts: [
              ]
              Name: ApplicationSource
              OutputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref 'AWS::StackName'
              InputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - SourceArtifact
              Name: Build
              OutputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                Extract: true
                BucketName: !Ref 'PublicWebsiteBucket'
                CannedACL: public-read
              InputArtifacts:
                - Name: !Join
                    - '-'
                    - - !Ref 'AWS::StackName'
                      - BuildArtifact
              Name: Deploy
              RunOrder: 1
    Type: AWS::CodePipeline::Pipeline


  ArtifactBucketPolicy:
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref 'ArtifactsBucket'
      PolicyDocument:
        Id: SSEAndSSLPolicy
        Statement:
          - Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt
                  - CodePipelineTrustRole
                  - Arn
                - !GetAtt
                  - CodeBuildRole
                  - Arn
                - !GetAtt
                  - CloudFormationTrustRole
                  - Arn
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
                  - /*
            Sid: WhitelistedGet
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt
                  - CodePipelineTrustRole
                  - Arn
                - !GetAtt
                  - CodeBuildRole
                  - Arn
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'ArtifactsBucket'
                  - /*
            Sid: WhitelistedPut
        Version: 2012-10-17
    Type: AWS::S3::BucketPolicy


  PublicWebsiteBucket:
    Type: AWS::S3::Bucket
    Description: Public Website
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: chuckbenger.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  CacheBucket:
    Type: AWS::S3::Bucket
    Description: CodeBuild caching
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - CacheBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Description: CodePipeline and CodeBuild artifiacts
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ArtifactsBucket
      VersioningConfiguration:
        Status: Enabled

  Webhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref ReleasePipeline
      TargetAction: ApplicationSource
      Name: MyWebhook
      TargetPipelineVersion: !GetAtt ReleasePipeline.Version
      RegisterWithThirdParty: 'true'